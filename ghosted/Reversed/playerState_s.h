/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'iw6_ds_xb3.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct XAnimNotifyInfo;
struct XAnimPartTrans;
struct XAnimDeltaPartQuat2;
struct XAnimDeltaPartQuat;
struct XAnimDeltaPart;
struct XAnimParts;

/* 2544 */
struct $39EF277EA8613772F6FC6094760A0E98
{
  unsigned __int32 weaponIdx : 8;
  unsigned __int32 weaponVariation : 6;
  unsigned __int32 weaponScopes : 3;
  unsigned __int32 weaponUnderBarrels : 2;
  unsigned __int32 weaponOthers : 8;
  unsigned __int32 scopeVariation : 5;
};

/* 2545 */
union Weapon
{
  $39EF277EA8613772F6FC6094760A0E98 __s0;
  unsigned int data;
};

/* 2556 */
struct PlayerVehicleState
{
  int entity;
  int flags;
  int targetEntity;
  float origin[3];
  float angles[3];
  float velocity[3];
  float angVelocity[3];
  float tilt[2];
  float tiltVelocity[2];
  float gunAngles[2];
  unsigned int splineId;
  unsigned int splineNodeIndex;
  float splineLambda;
  float corridorSpeeds[2];
};

/* 2557 */
struct EntityEvent
{
  int eventType;
  int eventParm;
};

/* 2558 */
struct playerEvents_t
{
  int eventSequence;
  EntityEvent events[4];
  int oldEventSequence;
  int timeADSCameUp;
};

/* 373 */
enum ViewLockTypes
{
  PLAYERVIEWLOCK_NONE = 0x0,
  PLAYERVIEWLOCK_FULL = 0x1,
  PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
  PLAYERVIEWLOCKCOUNT = 0x3,
};

/* 2554 */
struct SprintState_s
{
  int sprintButtonUpRequired;
  int sprintDelay;
  int lastSprintStart;
  int lastSprintEnd;
  int sprintStartMaxLength;
};

/* 2378 */
struct compressedAnimData_s
{
  int flags;
  int animRate;
  int distanceIn2D;
  int distanceOut2D;
  int distanceInZ;
  int distanceOutZ;
  int endScriptAnimTableIndex;
};

/* 2379 */
struct MantleState
{
  float yaw;
  int startPitch;
  int transIndex;
  int flags;
  int startTime;
  float startPosition[3];
  compressedAnimData_s compressedAnimData;
};

/* 2550 */
struct SlideState
{
  int flags;
  int noFricTime;
};

/* 2559 */
struct PlayerActiveWeaponState
{
  int weapAnim;
  int weaponTime;
  int weaponDelay;
  int weaponRestrictKickTime;
  int weaponState;
  int weapHandFlags;
  unsigned int weaponShotCount;
};

/* 2560 */
struct __declspec(align(4)) PlayerEquippedWeaponState
{
  bool usedBefore;
  bool dualWielding;
  bool inAltMode;
  bool needsRechamber[2];
  int zoomLevelIndex;
  bool thermalEnabled;
  bool hybridScope;
};

/* 230 */
enum OffhandClass
{
  OFFHAND_CLASS_NONE = 0x0,
  OFFHAND_CLASS_FRAG_GRENADE = 0x1,
  OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
  OFFHAND_CLASS_FLASH_GRENADE = 0x3,
  OFFHAND_CLASS_THROWINGKNIFE = 0x4,
  OFFHAND_CLASS_OTHER = 0x5,
  OFFHAND_CLASS_COUNT = 0x6,
};

/* 204 */
enum PlayerHandIndex
{
  WEAPON_HAND_RIGHT = 0x0,
  WEAPON_HAND_LEFT = 0x1,
  NUM_WEAPON_HANDS = 0x2,
  WEAPON_HAND_DEFAULT = 0x0,
};

/* 2561 */
struct __declspec(align(8)) GlobalAmmo
{
  unsigned __int64 ammoType;
  int ammoCount;
};

/* 2562 */
struct ClipAmmo
{
  unsigned __int64 clipIndex;
  int ammoCount[2];
};

/* 2563 */
struct PlayerWeaponAnimArrays
{
  XAnimParts *normalAnimArray[124];
  XAnimParts *altAnimArray[124];
};

/* 2564 */
struct PlayerWeaponCommonState
{
  Weapon offHand;
  OffhandClass offhandPrimary;
  OffhandClass offhandSecondary;
  Weapon weapon;
  int weapFlags;
  float fWeaponPosFrac;
  float aimSpreadScale;
  int adsDelayTime;
  int spreadOverride;
  int spreadOverrideState;
  float fAimSpreadMovementScale;
  PlayerHandIndex lastWeaponHand;
  GlobalAmmo ammoNotInClip[15];
  ClipAmmo ammoInClip[15];
  int weapLockFlags;
  int weapLockedEntnum;
  float weapLockedPos[3];
  int weaponIdleTime;
  Weapon lastStowedWeapon;
  PlayerWeaponAnimArrays weaponAnimArrays;
};

/* 235 */
enum ActionSlotType
{
  ACTIONSLOTTYPE_DONOTHING = 0x0,
  ACTIONSLOTTYPE_SPECIFYWEAPON = 0x1,
  ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
  ACTIONSLOTTYPE_NIGHTVISION = 0x3,
  ACTIONSLOTTYPECOUNT = 0x4,
};

/* 2546 */
struct ActionSlotParam_SpecifyWeapon
{
  Weapon weapon;
};

/* 2547 */
struct ActionSlotParam
{
  ActionSlotParam_SpecifyWeapon specifyWeapon;
};

/* 1237 */
enum objectiveState_t
{
  OBJST_EMPTY = 0x0,
  OBJST_ACTIVE = 0x1,
  OBJST_INVISIBLE = 0x2,
  OBJST_DONE = 0x3,
  OBJST_CURRENT = 0x4,
  OBJST_FAILED = 0x5,
  OBJST_NUMSTATES = 0x6,
};

/* 2565 */
struct objective_t_byClient
{
  int clientNum;
  int invert;
};

/* 2566 */
union objective_t_visData
{
  objective_t_byClient byClient;
  int teamNum;
  int clientMask;
};

struct ObjectiveVisMode {
    BYTE unk[0x04];
};

/* 2567 */
struct objective_t
{
  objectiveState_t state;
  float origin[3];
  int entNum;
  int shouldRotate;
  ObjectiveVisMode visMode;
  objective_t_visData visData;
  int icon;
};

/* 2572 */
struct $B2FABFD0754E004DA7C73116DDF8F234
{
  BYTE gap0[2360];
  int meleeChargeDist;
  int meleeChargeTime;
  int meleeChargeEnt;
  int meleeServerResult;
  unsigned int airburstMarkDistance;
  unsigned int perks[2];
  unsigned int perkSlots[9];
  ActionSlotType actionSlotType[4];
  ActionSlotParam actionSlotParam[4];
  int weaponHudIconOverrides[6];
  int shellshockIndex;
  int shellshockTime;
  int shellshockDuration;
  float viewKickScale;
  float dofNearStart;
  float dofNearEnd;
  float dofFarStart;
  float dofFarEnd;
  float dofNearBlur;
  float dofFarBlur;
  float dofViewmodelStart;
  float dofViewmodelEnd;
  objective_t objective[32];
};

/* 2573 */
union $78684C54B837BE4BA3B9334EED983549
{
  PlayerWeaponCommonState weapCommon;
  $B2FABFD0754E004DA7C73116DDF8F234 __s1;
};

/* 353 */
enum he_type_t
{
  HE_TYPE_FREE = 0x0,
  HE_TYPE_TEXT = 0x1,
  HE_TYPE_VALUE = 0x2,
  HE_TYPE_PLAYERNAME = 0x3,
  HE_TYPE_MATERIAL = 0x4,
  HE_TYPE_TIMER_DOWN = 0x5,
  HE_TYPE_TIMER_UP = 0x6,
  HE_TYPE_TIMER_STATIC = 0x7,
  HE_TYPE_TENTHS_TIMER_DOWN = 0x8,
  HE_TYPE_TENTHS_TIMER_UP = 0x9,
  HE_TYPE_TENTHS_TIMER_STATIC = 0xA,
  HE_TYPE_CLOCK_DOWN = 0xB,
  HE_TYPE_CLOCK_UP = 0xC,
  HE_TYPE_WAYPOINT = 0xD,
  HE_TYPE_COUNT = 0xE,
};

/* 2375 */
struct $C96EA5EC2ACBB9C0BF22693F316ACC67
{
  char r;
  char g;
  char b;
  char a;
};

/* 2376 */
union hudelem_color_t
{
  $C96EA5EC2ACBB9C0BF22693F316ACC67 __s0;
  int rgba;
};

/* 2377 */
struct hudelem_s
{
  he_type_t type;
  float x;
  float y;
  float z;
  int targetEntNum;
  float fontScale;
  float fromFontScale;
  int fontScaleStartTime;
  int fontScaleTime;
  int font;
  int alignOrg;
  int alignScreen;
  hudelem_color_t color;
  hudelem_color_t fromColor;
  int fadeStartTime;
  int fadeTime;
  int label;
  int width;
  int height;
  int materialIndex;
  int fromWidth;
  int fromHeight;
  int scaleStartTime;
  int scaleTime;
  float fromX;
  float fromY;
  int fromAlignOrg;
  int fromAlignScreen;
  int moveStartTime;
  int moveTime;
  int time;
  int duration;
  float value;
  int text;
  float sort;
  hudelem_color_t glowColor;
  int fxBirthTime;
  int fxLetterTime;
  int fxDecayStartTime;
  int fxDecayDuration;
  int soundID;
  int flags;
};

/* 2568 */
struct playerState_s_hud
{
  hudelem_s current[30];
  hudelem_s archival[15];
};

/* 2551 */
union OmnvarValue
{
  bool enabled;
  int integer;
  unsigned int time;
  float value;
  unsigned int ncsString;
};

/* 2552 */
struct OmnvarData
{
  unsigned int timeModified;
  OmnvarValue current;
};

/* 2569 */
struct ClientOutlineData
{
  unsigned int bits[4];
};

/* 2570 */
struct $BEFE9800A1314C6B12F8C3CE18A08083
{
  unsigned __int32 iHeadIcon : 4;
  unsigned __int32 iHeadIconTeam : 2;
  unsigned __int32 hudOutlineInfo : 5;
  unsigned __int32 padding : 21;
};

/* 2571 */
union HudData
{
  $BEFE9800A1314C6B12F8C3CE18A08083 __s0;
  unsigned int data;
};

/* 2574 */
struct playerState_s
{
  int commandTime;
  int pm_type;
  int pm_time;
  int pm_flags;
  int otherFlags;
  int linkFlags;
  int bobCycle;
  float origin[3];
  float velocity[3];
  int grenadeTimeLeft;
  int throwbackGrenadeOwner;
  int throwbackGrenadeTimeLeft;
  Weapon throwbackWeapon;
  int movingPlatformEntity;
  int remoteEyesEnt;
  int remoteEyesTagname;
  int remoteControlEnt;
  int remoteTurretEnt;
  int foliageSoundTime;
  int gravity;
  int speed;
  float delta_angles[3];
  int groundEntityNum;
  float vLadderVec[3];
  int jumpTime;
  float jumpOriginZ;
  int legsTimer;
  int legsAnim;
  int torsoTimer;
  int torsoAnim;
  int animMoveType;
  int damageTimer;
  int damageDuration;
  int flinch;
  int movementDir;
  int turnStartTime;
  int turnDirection;
  int turnRemaining;
  int corpseIndex;
  PlayerVehicleState vehicleState;
  int eFlags;
  playerEvents_t pe;
  int unpredictableEventSequence;
  int unpredictableEventSequenceOld;
  EntityEvent unpredictableEvents[4];
  int clientNum;
  int viewmodelIndex;
  float viewangles[3];
  int viewHeightTarget;
  float viewHeightCurrent;
  int viewHeightLerpTime;
  int viewHeightLerpTarget;
  int viewHeightLerpDown;
  float viewAngleClampBase[2];
  float viewAngleClampRange[2];
  int damageEvent;
  int damageYaw;
  int damagePitch;
  int damageCount;
  int damageFlags;
  int stats[4];
  float proneDirection;
  float proneDirectionPitch;
  float proneTorsoPitch;
  ViewLockTypes viewlocked;
  int viewlocked_entNum;
  float linkAngles[3];
  float linkWeaponAngles[3];
  int linkWeaponEnt;
  int loopSound;
  int groundRefEnt;
  int cursorHint;
  unsigned int cursorHintString;
  int cursorHintEntIndex;
  int cursorHintDualWield;
  int iCompassPlayerInfo;
  int radarEnabled;
  int radarBlocked;
  int radarMode;
  int radarStrength;
  int radarShowEnemyDirection;
  int sightedEnemyPlayersMask;
  int locationSelectionInfo;
  SprintState_s sprintState;
  float holdBreathScale;
  int holdBreathTimer;
  float moveSpeedScaleMultiplier;
  float grenadeCookScale;
  MantleState mantleState;
  SlideState slideState;
  float leanf;
  PlayerActiveWeaponState weapState[2];
  Weapon weaponsEquipped[15];
  PlayerEquippedWeaponState weapEquippedData[15];
  $78684C54B837BE4BA3B9334EED983549 ___u94;
  int deltaTime;
  int killCamEntity;
  int killCamLookAtEntity;
  int killCamClientNum;
  playerState_s_hud hud;
  OmnvarData rxvOmnvars[48];
  unsigned int partBits[8];
  int recoilScale;
  int stunTime;
  int clothType;
  ClientOutlineData outlineData;
  HudData hudData;
};

/* 357 */
enum scr_string_t
{
};

/* 2481 */
union XAnimIndices
{
  char *_1;
  unsigned __int16 *_2;
  void *data;
};

/* 2495 */
struct XAnimParts
{
  const char *name;
  unsigned __int16 dataByteCount;
  unsigned __int16 dataShortCount;
  unsigned __int16 dataIntCount;
  unsigned __int16 randomDataByteCount;
  unsigned __int16 randomDataIntCount;
  unsigned __int16 numframes;
  char flags;
  char boneCount[10];
  char notifyCount;
  char assetType;
  char ikType;
  unsigned int randomDataShortCount;
  unsigned int indexCount;
  float framerate;
  float frequency;
  scr_string_t *names;
  char *dataByte;
  __int16 *dataShort;
  int *dataInt;
  __int16 *randomDataShort;
  char *randomDataByte;
  int *randomDataInt;
  XAnimIndices indices;
  XAnimNotifyInfo *notify;
  XAnimDeltaPart *deltaPart;
};

/* 2482 */
struct XAnimNotifyInfo
{
  scr_string_t name;
  float time;
};

/* 2494 */
struct XAnimDeltaPart
{
  XAnimPartTrans *trans;
  XAnimDeltaPartQuat2 *quat2;
  XAnimDeltaPartQuat *quat;
};

/* 2483 */
union XAnimDynamicFrames
{
  char (*_1)[3];
  unsigned __int16 (*_2)[3];
};

/* 2484 */
union XAnimDynamicIndices
{
  char _1[1];
  unsigned __int16 _2[1];
};

/* 2485 */
struct __declspec(align(8)) XAnimPartTransFrames
{
  float mins[3];
  float size[3];
  XAnimDynamicFrames frames;
  XAnimDynamicIndices indices;
};

/* 2486 */
union XAnimPartTransData
{
  XAnimPartTransFrames frames;
  float frame0[3];
};

/* 2487 */
struct XAnimPartTrans
{
  unsigned __int16 size;
  char smallTrans;
  XAnimPartTransData u;
};

/* 2488 */
struct __declspec(align(8)) XAnimDeltaPartQuatDataFrames2
{
  __int16 (*frames)[2];
  XAnimDynamicIndices indices;
};

/* 2489 */
union XAnimDeltaPartQuatData2
{
  XAnimDeltaPartQuatDataFrames2 frames;
  __int16 frame0[2];
};

/* 2490 */
struct XAnimDeltaPartQuat2
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData2 u;
};

/* 2491 */
struct __declspec(align(8)) XAnimDeltaPartQuatDataFrames
{
  __int16 (*frames)[4];
  XAnimDynamicIndices indices;
};

/* 2492 */
union XAnimDeltaPartQuatData
{
  XAnimDeltaPartQuatDataFrames frames;
  __int16 frame0[4];
};

/* 2493 */
struct XAnimDeltaPartQuat
{
  unsigned __int16 size;
  XAnimDeltaPartQuatData u;
};

