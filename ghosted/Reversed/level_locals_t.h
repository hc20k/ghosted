/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'iw6_ds_xb3.exe'
*/

#include <minwindef.h>
#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct PhysPreset;
struct OmnvarData;
struct gentity_s;
struct gclient_s;
struct Turret;
struct gagent_s;
struct sentient_s;
struct VehicleTrackObstacle;
struct VehicleTrackSector;
struct VehicleTrackSegment;
struct dxJoint;
struct dxBody;
struct dxGeom;
struct dxGeomVtbl;
struct dxSpace;
struct dxWorld;
struct VehiclePhysDef;
struct GraphFloat;
struct PhysVehicle;
struct Vehicle;
struct tagInfo_s;
struct pathlink_s;
struct pathnode_t;
struct ai_common_t;
struct OmnvarClientData;
struct OmnvarGameData;

/* 2565 */
struct objective_t_visData_byClient
{
  int clientNum;
  int invert;
};


/* 1012 */
enum teammode_t
{
  TEAMMODE_AXIS_ALLIES = 0x0,
  TEAMMODE_FFA = 0x1,
  TEAMMODE_NUM_MODES = 0x2,
};

/* 4515 */
struct __declspec(align(8)) SpawnVar
{
  bool spawnVarsValid;
  int numSpawnVars;
  unsigned int spawnVarsKey[64];
  char *spawnVarsValue[64];
  int numSpawnVarChars;
  char spawnVarChars[2048];
};

/* 2624 */
struct EntHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 4516 */
struct trigger_info_t
{
  unsigned __int16 entnum;
  unsigned __int16 otherEntnum;
  int useCount;
  int otherUseCount;
};

/* 4517 */
struct com_parse_mark_t
{
  int lines;
  const char *text;
  int ungetToken;
  int backup_lines;
  const char *backup_text;
};


/* 4518 */
struct cached_tag_mat_t
{
  int time;
  int entnum;
  scr_string_t name;
  float tagMat[4][3];
};

/* 4519 */
struct outline_data_t
{
  int refCount;
  char colorIndexForClient[18];
  bool depthEnableForClient[18];
  unsigned int enabledForClientMask;
};

/* 4520 */
struct __declspec(align(8)) level_locals_t
{
  gclient_s *clients;
  OmnvarClientData *clientOmnvars;
  OmnvarGameData *gameOmnvars;
  gentity_s *gentities;
  int num_entities;
  gentity_s *firstFreeEnt;
  gentity_s *lastFreeEnt;
  Turret *turrets;
  sentient_s *sentients;
  int iSearchFrame;
  gagent_s *agents;
  int initializing;
  int clientIsSpawning;
  objective_t objectives[32];
  int maxclients;
  int maxagents;
  int framenum;
  int time;
  int previousTime;
  int frametime;
  int startTime;
  int teamScores[4];
  teammode_t teammode;
  int pingUpdateTime;
  bool teamHasRadar[4];
  bool teamRadarBlocked[4];
  int teamRadarStrength[4];
  int markedForEyesOn;
  int manualNameChange;
  int numConnectedClients;
  int sortedClients[18];
  SpawnVar spawnVar;
  int savepersist;
  EntHandle droppedWeaponCue[32];
  float fFogOpaqueDist;
  float fFogOpaqueDistSqrd;
  int currentPlayerClone;
  int currentAgentClone;
  trigger_info_t pendingTriggerList[256];
  trigger_info_t currentTriggerList[256];
  int pendingTriggerListSize;
  int currentTriggerListSize;
  int finished;
  int bPlayerIgnoreRadiusDamage;
  int bPlayerIgnoreRadiusDamageLatched;
  int currentEntityThink;
  __int64 openScriptIOFileHandles[1];
  char *openScriptIOFileBuffers[1];
  com_parse_mark_t currentScriptIOLineMark[1];
  cached_tag_mat_t cachedTagMat;
  int scriptPrintChannel;
  float compassMapUpperLeft[2];
  float compassMapWorldSize[2];
  float compassNorth[2];
  float pathnodeWorldSize[3];
  Vehicle *vehicles;
  int hudElemLastAssignedSoundID;
  outline_data_t outlineData[32];
};

/* 375 */
enum sessionState_t
{
  SESS_STATE_PLAYING = 0x0,
  SESS_STATE_DEAD = 0x1,
  SESS_STATE_SPECTATOR = 0x2,
  SESS_STATE_INTERMISSION = 0x3,
};

/* 376 */
enum clientConnected_t
{
  CON_DISCONNECTED = 0x0,
  CON_CONNECTING = 0x1,
  CON_CONNECTED = 0x2,
};

/* 2626 */
struct usercmd_s
{
  int serverTime;
  unsigned int buttons;
  int angles[3];
  Weapon weapon;
  Weapon offHand;
  char forwardmove;
  char rightmove;
  unsigned __int16 airburstMarkDistance;
  unsigned __int16 meleeChargeEnt;
  char meleeChargeDist;
  char selectedLoc[2];
  char selectedLocAngle;
  char remoteControlAngles[2];
  char remoteControlMove[3];
  unsigned int sightedClientsMask;
  unsigned __int16 spawnTraceEntIndex;
  unsigned int sightedSpawnsMask;
  unsigned int partialSightedSpawnsMask;
};

/* 2627 */
struct playerTeamState_t
{
  int location;
};

/* 317 */
enum team_t
{
  TEAM_FREE = 0x0,
  TEAM_BAD = 0x0,
  TEAM_AXIS = 0x1,
  TEAM_ALLIES = 0x2,
  TEAM_SPECTATOR = 0x3,
  TEAM_NUM_TEAMS = 0x4,
};

/* 2628 */
struct rootMotionInfo_s
{
  int startTime;
  float startPosition[3];
  float yaw;
};

/* 2629 */
struct ClientCustomizationInfo
{
  unsigned int modelIndex[3];
};

/* 2630 */
struct clientState_s
{
  int clientIndex;
  team_t team;
  int modelindex;
  int dualWielding;
  int attachModelIndex[6];
  int attachTagIndex[6];
  char name[32];
  int rank;
  int prestige;
  int nameplateFriendlyIndex;
  int nameplateEnemyIndex;
  unsigned int perks[2];
  rootMotionInfo_s rootMotion;
  compressedAnimData_s compressedAnimData;
  int meleeChargeEnt;
  int voiceConnectivityBits;
  char clanAbbrev[8];
  unsigned int playerCardPatch;
  unsigned int playerCardBackground;
  unsigned int use_elite_clan_tag;
  char elite_clan_tag_text[8];
  int elite_clan_level;
  unsigned int elite_clan_id_high;
  unsigned int elite_clan_id_low;
  unsigned int isPrivatePartyHost;
  unsigned int isMLGSpectator;
  ClientCustomizationInfo customization;
  int game_extrainfo;
};

/* 2631 */
struct ScoreInfo
{
  unsigned __int16 ping;
  char status;
  unsigned __int16 score;
  unsigned __int16 kills;
  unsigned __int16 deaths;
  unsigned __int16 assists;
  unsigned __int16 extrascore0;
  unsigned __int16 extrascore1;
  unsigned __int16 adrenaline;
};

/* 2632 */
struct clientSession_t
{
  sessionState_t sessionState;
  int forceSpectatorClient;
  int isInKillcam;
  int killCamEntity;
  int killCamLookAtEntity;
  int archiveTime;
  unsigned __int16 scriptPersId;
  clientConnected_t connected;
  usercmd_s cmd;
  usercmd_s oldcmd;
  int localClient;
  char newnetname[32];
  int maxHealth;
  int enterTime;
  playerTeamState_t teamState;
  int voteCount;
  int teamVoteCount;
  float moveSpeedScaleMultiplier;
  int viewmodelIndex;
  int noSpectate;
  clientState_s cs;
  ScoreInfo scores;
  int psOffsetTime;
  int hasRadar;
  int isRadarBlocked;
  int radarStrength;
  int radarShowEnemyDirection;
  int radarMode;
  int sightedPlayers;
  int lastDeathTime;
  int weaponHudIconOverrides[6];
  unsigned int unusableEntFlags[64];
  float spectateDefaultPos[3];
  float spectateDefaultAngles[3];
  float mlgCameraPos[4][3];
  float mlgCameraAngles[4][3];
  team_t mlgSpectatingTeam;
  float clanWarsXPModifier;
  OmnvarData *omnvars;
};

/* 2633 */
struct iw_padding_4
{
  char buf[4];
};

/* 2634 */
struct AntilagAimHistoryFrame
{
  float offset[3];
  float angleOffset;
};

/* 2635 */
struct viewClamp
{
  float start[2];
  float current[2];
  float goal[2];
};

/* 2636 */
struct viewClampState
{
  viewClamp min;
  viewClamp max;
  float accelTime;
  float decelTime;
  float totalTime;
  float startTime;
};

/* 281 */
enum hintType_t
{
  HINT_NONE = 0x0,
  HINT_NOICON = 0x1,
  HINT_ACTIVATE = 0x2,
  HINT_HEALTH = 0x3,
  HINT_FRIENDLY = 0x4,
  HINT_WEAPON = 0x5,
  HINT_NUM_HINTS = 0x6,
};

/* 2638 */
struct __declspec(align(8)) gclient_s
{
  BYTE ps[13056];
  clientSession_t sess;
  int flags;
  int spectatorClient;
  int cycleSpectatorClient;
  int cycleSpectatorTime;
  int lastCmdTime;
  iw_padding_4 mpviewer_padding;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  int buttonsSinceLastFrame;
  float oldOrigin[3];
  float fGunPitch;
  float fGunYaw;
  AntilagAimHistoryFrame antilagAimHistory[8];
  int damage_blood;
  int damage_stun;
  float damage_from[3];
  int damage_fromWorld;
  int accurateCount;
  int accuracy_shots;
  int accuracy_hits;
  int inactivityTime;
  int inactivityWarning;
  int lastVoiceTime;
  int switchTeamTime;
  float currentAimSpreadScale;
  float prevLinkedInvQuat[4];
  bool prevLinkAnglesSet;
  bool link_rotationMovesEyePos;
  bool link_doCollision;
  bool link_useTagAnglesForViewAngles;
  bool link_useBaseAnglesForViewClamp;
  float linkAnglesFrac;
  viewClampState link_viewClamp;
  gentity_s *persistantPowerup;
  int portalID;
  int dropWeaponTime;
  int sniperRifleFiredTime;
  float sniperRifleMuzzleYaw;
  int PCSpecialPickedUpCount;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  int iLastCompassPlayerInfoEnt;
  int compassPingTime;
  int damageTime;
  float v_dmg_roll;
  float v_dmg_pitch;
  float baseAngles[3];
  float baseOrigin[3];
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float fLastIdleFactor;
  int lastServerTime;
  Weapon lastWeapon;
  unsigned __int32 lastWeaponAltStatus : 1;
  unsigned __int32 previouslyFiring : 1;
  unsigned __int32 previouslyFiringLeftHand : 1;
  unsigned __int32 previouslyUsingNightVision : 1;
  unsigned __int32 previouslySprinting : 1;
  unsigned __int32 previouslySprintSliding : 1;
  int visionDuration[7];
  char visionName[7][64];
  int contactEntity;
  int lastStand;
  int lastStandTime;
  int hudElemLastAssignedSoundID;
  float lockedTargetOffset[3];
  scr_string_t attachShieldTagName;
  hintType_t hintForcedType;
  unsigned int hintForcedString;
  float grenadeThrowSpeedScale;
  float grenadeThrowSpeedUpScale;
};

/* 4513 */
struct OmnvarClientData
{
  OmnvarData omnvars[256];
};

/* 4514 */
struct OmnvarGameData
{
  OmnvarData omnvars[256];
};

/* 309 */
enum trType_t
{
  TR_STATIONARY = 0x0,
  TR_INTERPOLATE = 0x1,
  TR_LINEAR = 0x2,
  TR_LINEAR_STOP = 0x3,
  TR_SINE = 0x4,
  TR_GRAVITY = 0x5,
  TR_LOW_GRAVITY = 0x6,
  TR_ACCELERATE = 0x7,
  TR_DECELERATE = 0x8,
  TR_PHYSICS = 0x9,
  TR_ANIMATED_MOVER = 0xA,
  TR_FIRST_RAGDOLL = 0xB,
  TR_RAGDOLL = 0xB,
  TR_RAGDOLL_GRAVITY = 0xC,
  TR_RAGDOLL_INTERPOLATE = 0xD,
  TR_LAST_RAGDOLL = 0xD,
  NUM_TRTYPES = 0xE,
};

/* 2584 */
struct trajectory_t
{
  trType_t trType;
  int trTime;
  int trDuration;
  float trBase[3];
  float trDelta[3];
};

/* 2585 */
struct __declspec(align(2)) LerpEntityStateTurret
{
  float gunAngles[3];
  int lastBarrelRotChangeTime;
  unsigned __int16 lastBarrelRotChangeRate;
  unsigned __int16 lastHeatChangeLevel;
  int lastHeatChangeTime;
  bool isBarrelRotating;
  bool isOverheat;
  bool isHeatingUp;
};

/* 2586 */
struct LerpEntityStateLoopFx
{
  float cullDist;
  int period;
};

/* 2587 */
struct LerpEntityStatePrimaryLight
{
  char colorAndExp[4];
  float intensity;
  float radius;
  float cosHalfFovOuter;
  float cosHalfFovInner;
};

/* 2588 */
struct LerpEntityStatePlayer
{
  int movementDir;
  float lerpLean;
  float torsoPitch;
  float waistPitch;
  Weapon offhandWeapon;
  Weapon stowedWeapon;
  int lastSpawnTime;
};

/* 2589 */
struct LerpEntityStateAgentCorpse
{
  int modelIndex;
  int attachModels[3];
  int attachTags[3];
};

/* 2590 */
struct LerpEntityStateVehicle
{
  unsigned int indices;
  unsigned int flags;
  float bodyPitch;
  float bodyRoll;
  float steerYaw;
  float gunPitch;
  float gunYaw;
};

/* 2591 */
struct LerpEntityStatePlane
{
  int ownerNum;
  int enemyIcon;
  int friendIcon;
};

/* 1120 */
enum MissileFlightMode
{
  MISSILEFLIGHTMODE_TOP = 0x0,
  MISSILEFLIGHTMODE_DIRECT = 0x1,
  MISSILEFLIGHTMODE_COUNT = 0x2,
};

/* 2592 */
struct LerpEntityStateMissile
{
  int launchTime;
  MissileFlightMode flightMode;
  int flags;
};

/* 2593 */
struct LerpEntityStateSoundBlend
{
  float lerp;
};

/* 2594 */
struct LerpEntityStateBulletHit
{
  float start[3];
};

/* 2595 */
struct LerpEntityStateEarthquake
{
  float scale;
  float radius;
  int duration;
};

/* 2596 */
struct LerpEntityStateCustomExplode
{
  int startTime;
};

/* 2597 */
struct LerpEntityStateExplosion
{
  float innerRadius;
  float outerRadius;
  float magnitude;
};

/* 2598 */
struct LerpEntityStateExplosionJolt
{
  float innerRadius;
  float outerRadius;
  float impulse[3];
};

/* 2599 */
struct LerpEntityStatePhysicsJitter
{
  float innerRadius;
  float outerRadius;
  float minDisplacement;
  float maxDisplacement;
};

/* 2600 */
struct LerpEntityStatePhysicsImpactSnd
{
  int sndClass;
  float impactMomentum;
};

/* 2601 */
struct LerpEntityStateRadiusDamage
{
  float range;
  int damageMin;
  int damageMax;
};

/* 2602 */
struct LerpEntityStateScriptMover
{
  int entToTakeMarksFrom;
  int xModelIndex;
  int animIndex;
  int animTime;
};

/* 2603 */
struct LerpEntityStateAnonymous
{
  int data[7];
};

/* 2604 */
union LerpEntityStateTypeUnion
{
  LerpEntityStateTurret turret;
  LerpEntityStateLoopFx loopFx;
  LerpEntityStatePrimaryLight primaryLight;
  LerpEntityStatePlayer player;
  LerpEntityStateAgentCorpse agentCorpse;
  LerpEntityStateVehicle vehicle;
  LerpEntityStatePlane plane;
  LerpEntityStateMissile missile;
  LerpEntityStateSoundBlend soundBlend;
  LerpEntityStateBulletHit bulletHit;
  LerpEntityStateEarthquake earthquake;
  LerpEntityStateCustomExplode customExplode;
  LerpEntityStateExplosion explosion;
  LerpEntityStateExplosionJolt explosionJolt;
  LerpEntityStatePhysicsJitter physicsJitter;
  LerpEntityStatePhysicsImpactSnd physicsImpactSnd;
  LerpEntityStateRadiusDamage radiusDamage;
  LerpEntityStateScriptMover scriptMover;
  LerpEntityStateAnonymous anonymous;
};

/* 2605 */
struct LerpEntityState
{
  int eFlags;
  trajectory_t pos;
  trajectory_t apos;
  LerpEntityStateTypeUnion u;
};

/* 2606 */
struct StaticEntityStatePlayer
{
  int playerFlags;
};

/* 2607 */
struct StaticEntityStateVehicle
{
  int playerIndex;
};

/* 2608 */
struct StaticEntityStateTurret
{
  int isBeingCarried;
};

/* 2609 */
struct StaticEntityStateMover
{
  unsigned int scriptableIndex;
};

/* 2610 */
struct StaticEntityStateAgentCorpse
{
  Weapon stowedWeapon;
};

/* 2611 */
struct StaticEntityStateFX
{
  int killEffectDef;
};

/* 2612 */
struct StaticEntityStateAnonymous
{
  int data[1];
};

/* 2613 */
union StaticEntityStateTypeUnion
{
  StaticEntityStatePlayer player;
  StaticEntityStateVehicle vehicle;
  StaticEntityStateTurret turret;
  StaticEntityStateMover mover;
  StaticEntityStateAgentCorpse agentCorpse;
  StaticEntityStateFX fx;
  StaticEntityStateAnonymous anonymous;
};

/* 2614 */
union entityState_s_index
{
  int brushModel;
  int triggerModel;
  int xmodel;
  int primaryLight;
};


/* 2615 */
struct selectAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 padding : 31;
};

/* 2616 */
struct stateAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 animState : 7;
  unsigned __int32 animEntry : 5;
  unsigned __int32 animClass : 3;
  unsigned __int32 padding : 16;
};

/* 2617 */
struct bodyAnim_t
{
  unsigned __int32 usingAnimState : 1;
  unsigned __int32 packedTorsoAnim : 9;
  unsigned __int32 packedLegsAnim : 11;
  unsigned __int32 padding : 11;
};

/* 2618 */
union $6FC92F35C9B036412CC901DAE285794B
{
  selectAnim_t selectAnim;
  stateAnim_t stateAnim;
  bodyAnim_t bodyAnim;
  unsigned int animData;
};

/* 2619 */
struct animInfo_t
{
  int animTime;
  $6FC92F35C9B036412CC901DAE285794B ___u1;
};

/* 2620 */
union entityState_s_un1 {
  int eventParm2;
  unsigned int hintString;
  int fxId;
};

/* 2621 */
union entityState_s_un2
{
  int hintType;
  int vehicleXModel;
  float animRate;
};

/* 2622 */
struct clientLinkInfo_t
{
  unsigned __int32 parentId : 11;
  unsigned __int32 boneIndex : 8;
  unsigned __int32 flags : 2;
  unsigned __int32 padding : 11;
};

/* 2623 */
struct entityState_s
{
  int number;
  int eType;
  LerpEntityState lerp;
  StaticEntityStateTypeUnion staticState;
  int time2;
  int otherEntityNum;
  int attackerEntityNum;
  int groundEntityNum;
  int loopSound;
  int surfType;
  entityState_s_index index;
  int clientNum;
  HudData hudData;
  int solid;
  unsigned int eventParm;
  int eventSequence;
  EntityEvent events[4];
  Weapon weapon;
  int inAltWeaponMode;
  animInfo_t animInfo;
  entityState_s_un1 un1;
  entityState_s_un2 un2;
  clientLinkInfo_t clientLinkInfo;
  unsigned int partBits[8];
  int clientMask[1];
  unsigned int pad[1];
};

/* 2450 */
struct Bounds
{
  float midPoint[3];
  float halfSize[3];
};

/* 2625 */
struct entityShared_t
{
  char isLinked;
  char modelType;
  char svFlags;
  char isInUse;
  Bounds box;
  int contents;
  Bounds absBox;
  float currentOrigin[3];
  float currentAngles[3];
  EntHandle ownerNum;
  int eventTime;
};

/* 2682 */
struct __declspec(align(4)) item_ent_t
{
  int ammoCount;
  int clipAmmoCount[2];
  Weapon weapon;
  bool dualWieldItem;
};

/* 2683 */
struct spawner_ent_t
{
  int team;
  int timestamp;
  int index;
};

/* 2684 */
struct __declspec(align(4)) trigger_ent_t
{
  int threshold;
  int accumulate;
  int timestamp;
  int singleUserEntIndex;
  int damage;
  bool requireLookAt;
};

/* 2685 */
struct mover_positions_t
{
  float decelTime;
  float speed;
  float midTime;
  float pos1[3];
  float pos2[3];
  float pos3[3];
};

/* 2686 */
struct mover_slidedata_t
{
  Bounds bounds;
  float velocity[3];
};

/* 2687 */
union $0EBA94A84ED9CF53E600CEB956DCB332
{
  mover_positions_t pos;
  mover_slidedata_t slide;
};

/* 2688 */
struct mover_ent_t
{
  $0EBA94A84ED9CF53E600CEB956DCB332 ___u0;
  mover_positions_t angle;
};

/* 2689 */
struct corpse_ent_t
{
  int deathAnimStartTime;
};

/* 2690 */
struct missile_fields_grenade
{
  float predictLandPos[3];
  int predictLandTime;
  float wobbleCycle;
  float curve;
};

/* 374 */
enum MissileStage
{
  MISSILESTAGE_SOFTLAUNCH = 0x0,
  MISSILESTAGE_ASCENT = 0x1,
  MISSILESTAGE_DESCENT = 0x2,
};

/* 2691 */
struct missile_fields_nonGrenade
{
  float curvature[3];
  float targetEntOffset[3];
  float targetPos[3];
  float launchOrigin[3];
  MissileStage stage;
};

/* 2692 */
union $0BDED71C026B4137362CC9EF09D7C405
{
  missile_fields_grenade grenade;
  missile_fields_nonGrenade nonGrenade;
};

/* 2693 */
struct missile_ent_t
{
  int timestamp;
  float time;
  int timeOfBirth;
  float travelDist;
  float surfaceNormal[3];
  team_t team;
  int flags;
  int antilagTimeOffset;
  $0BDED71C026B4137362CC9EF09D7C405 ___u8;
};

/* 2694 */
struct blend_ent_t
{
  float pos[3];
  float vel[3];
  float viewQuat[4];
  bool changed;
  float accelTime;
  float decelTime;
  float startTime;
  float totalTime;
};

/* 2696 */
union $5E34BF48AB980E6587EEDC149AFBF88E
{
  item_ent_t item[2];
  spawner_ent_t spawner;
  trigger_ent_t trigger;
  mover_ent_t mover;
  corpse_ent_t corpse;
  missile_ent_t missile;
  blend_ent_t blend;
};

/* 2637 */
struct gentity_s
{
  entityState_s s;
  entityShared_t r;
  unsigned int pad4[2];
  gclient_s *client;
  Turret *turret;
  gagent_s *agent;
  sentient_s *sentient;
  Vehicle *vehicle;
  __int64 physObjId;
  unsigned __int16 model;
  char physicsObject;
  char takedamage;
  char active;
  char handler;
  char team;
  bool freeAfterEvent;
  unsigned __int16 disconnectedLinks;
  __int16 padding_short2;
  scr_string_t classname;
  scr_string_t script_classname;
  scr_string_t script_linkName;
  scr_string_t target;
  scr_string_t targetname;
  unsigned int attachIgnoreCollision;
  int spawnflags;
  int flags;
  int eventTime;
  int clipmask;
  int processedFrame;
  EntHandle parent;
  EntHandle trackMovingPlatformEntity;
  int nextthink;
  int health;
  int maxHealth;
  $5E34BF48AB980E6587EEDC149AFBF88E ___u34;
  EntHandle missileTargetEnt;
  EntHandle remoteControlledOwner;
  int pad64_1;
  int padding_4[2];
  tagInfo_s *tagInfo;
  gentity_s *tagChildren;
  unsigned __int16 attachModelNames[19];
  __int16 padding_2;
  scr_string_t attachTagNames[19];
  int useCount;
  gentity_s *nextFree;
  int birthTime;
  int pad64_2;
};

/* 2639 */
struct __declspec(align(4)) Turret
{
  bool inuse;
  int flags;
  int fireTime;
  float arcmin[2];
  float arcmax[2];
  float dropPitch;
  int stance;
  int prevStance;
  int fireSndDelay;
  float userOrigin[3];
  float playerSpread;
  int state;
  EntHandle target;
  float targetOffset[3];
  EntHandle manualTarget;
  float manualTargetOffset[3];
  int targetTime;
  int stateChangeTime;
  int modeChangeTime;
  float maxRangeSquared;
  int prevTargetIndex;
  team_t eTeam;
  int convergenceTime[2];
  float convergenceHeightPercent;
  float targetPos[3];
  float missOffsetNormalized[3];
  float scanSpeed;
  float scanDecelYaw;
  int scanPauseTime;
  bool triggerDown;
  float heatLevel;
  int heatPenaltyEndTime;
  float barrelRollRate;
  int autoRotationStopDelay;
  int lastAutoRotationRequestTime;
  unsigned __int16 fireLoopSnd;
  unsigned __int16 scanLoopSnd;
  unsigned __int16 stopSnd;
};

struct weaponState_t
{
    const playerState_s* ps;
    float xyspeed;
    float frametime;
    float fLastIdleFactor;
    int time;
    int damageTime;
    float v_dmg_pitch;
    float v_dmg_roll;
    float baseAngles[3];
    float baseOrigin[3];
    float recoilAngles[3];
    float recoilSpeed[3];
    float swayAngles[3];
    float swayOrigin[3];
    float swayViewAngles[3];
    float bobAngles[3];
    int shellShockStart;
    int shellShockDuration;
    int shellShockFadeTime;
};

/* 2642 */
struct __declspec(align(8)) sentient_s
{
  gentity_s *ent;
  ai_common_t *ai;
  team_t eTeam;
  int iThreatBias;
  int iThreatBiasGroupIndex;
  bool bIgnoreMe;
  bool bIgnoreAll;
  bool originChanged;
  float oldOrigin[3];
  float maxVisibleDist;
  float surprisedByMeDistSq;
  int iEnemyNotifyTime;
  int attackerCount;
  EntHandle lastAttacker;
  EntHandle syncedMeleeEnt;
  EntHandle targetEnt;
  EntHandle scriptTargetEnt;
  float entityTargetThreat;
  int meleeAttackerSpot[4];
  float attackerAccuracy;
  bool ignoreRandomBulletDamage;
  bool doDamageToAll;
  bool turretInvulnerability;
  bool scriptTargetHasTagEye;
  pathnode_t *pClaimedNode;
  pathnode_t *pPrevClaimedNode;
  pathnode_t *pNearestNode;
  char bNearestNodeValid;
  char bNearestNodeBad;
  bool bOnlyGoodNearestNodes;
  bool inuse;
  __int8 expendable : 1;
  __int8 bIgnoreFoliageSightingMe : 1;
  int banNodeTime;
};

/* 2640 */
struct agentState_s
{
  int entityNum;
  team_t team;
  int modelindex;
  int dualWielding;
  int attachModelIndex[6];
  int attachTagIndex[6];
  int nameplateFriendlyIndex;
  int nameplateEnemyIndex;
  unsigned int perks[2];
  rootMotionInfo_s rootMotion;
  compressedAnimData_s compressedAnimData;
  int meleeChargeEnt;
  int name;
};

/* 2641 */
struct __declspec(align(8)) gagent_s
{
  BYTE playerState[13056];
  agentState_s agentState;
  usercmd_s cmd;
  usercmd_s oldcmd;
  float lockedTargetOffset[3];
  float baseAngles[3];
  float baseOrigin[3];
  float swayViewAngles[3];
  float swayOffset[3];
  float swayAngles[3];
  float recoilAngles[3];
  float recoilSpeed[3];
  float lastIdleFactor;
  float currentAimSpreadScale;
  float gunPitch;
  float gunYaw;
  float damagePitch;
  float damageRoll;
  int damageTime;
  int damageBlood;
  int damageStun;
  float damageFrom[3];
  int damageFromWorld;
  int maxHealth;
  int lastDeathTime;
  int lastServerTime;
  int flags;
  char agentGuid[7];
  AntilagAimHistoryFrame antilagAimHistory[8];
  scr_string_t attachShieldTagName;
  int buttons;
  int oldbuttons;
  int latched_buttons;
  EntHandle useHoldEntity;
  int useHoldTime;
  int useButtonDone;
  unsigned __int16 useEntsEnabled[2];
  Weapon lastWeapon;
  unsigned __int32 lastWeaponAltStatus : 1;
  unsigned __int32 previouslyFiring : 1;
  unsigned __int32 previouslyFiringLeftHand : 1;
  unsigned __int32 previouslyUsingNightVision : 1;
  unsigned __int32 previouslySprinting : 1;
  unsigned __int32 previouslySprintSliding : 1;
  float grenadeThrowSpeedScale;
  float grenadeThrowSpeedUpScale;
};

/* 377 */
enum VehicleDrivingState
{
  VEH_DRIVE_NONE = 0x0,
  VEH_DRIVE_PATH_CONSTRAINED = 0x1,
  VEH_DRIVE_PATH_FOLLOW = 0x2,
  VEH_DRIVE_TRACK = 0x3,
  VEH_DRIVE_AI = 0x4,
  VEH_DRIVE_PLAYER = 0x5,
};

/* 378 */
enum VehicleTransmission
{
  VEH_TRANS_FORWARD = 0x0,
  VEH_TRANS_REVERSE = 0x1,
};

/* 2643 */
struct __declspec(align(4)) VehiclePathNode
{
  scr_string_t name;
  scr_string_t target;
  scr_string_t script_linkname;
  scr_string_t script_noteworthy;
  __int16 index;
  __int16 flags;
  float speed;
  float lookAhead;
  float origin[3];
  float dir[3];
  float angles[3];
  float length;
  __int16 nextIdx;
  __int16 prevIdx;
  __int16 notifyIdx;
};

/* 2644 */
struct VehiclePathPos
{
  __int16 nodeIdx;
  __int16 flags;
  float frac;
  float speed;
  float lookAhead;
  float origin[3];
  float angles[3];
  float lookPos[3];
  VehiclePathNode switchNode[2];
};

/* 379 */
enum VehiclePathDir
{
  VEH_PATH_FORWARD = 0x0,
  VEH_PATH_REVERSE = 0x1,
};

/* 2648 */
struct __declspec(align(8)) VehicleTrackpos
{
  VehicleTrackSegment *segment;
  unsigned int sectorIndex;
};

/* 2649 */
struct vehicle_physic_t
{
  float origin[3];
  float prevOrigin[3];
  float angles[3];
  float prevAngles[3];
  Bounds bounds;
  float vel[3];
  float bodyVel[3];
  float accel[3];
  float bodyAccel[3];
  float rotVel[3];
  float bodyPitchVel;
  float bodyRollVel;
  float wheelZVel[6];
  float wheelZPos[6];
  int wheelSurfType[6];
  float wheelCompression[6];
  float wheelPrevCompression[6];
  float worldTilt[3];
  float worldTiltVel[3];
};

/* 2674 */
struct PhysVehicleControl
{
  float steering;
  float desiredSpeed;
  float desiredSpeedReverse;
  float accelOverride;
  float brake;
  float pitch;
};

/* 419 */
enum HelicopterMoveState
{
  VEH_MOVESTATE_STOP = 0x0,
  VEH_MOVESTATE_MOVE = 0x1,
  VEH_MOVESTATE_HOVER = 0x2,
};

/* 2675 */
struct HelicopterHover
{
  float hoverRadius;
  float hoverSpeed;
  float hoverAccel;
  float hoverGoalPos[3];
  int useHoverAccelForAngles;
  int droneHoverStatic;
  float droneHoverOffset[3];
  float droneHoverOffsetTimer;
};

/* 420 */
enum DroneMoveState
{
  DRONEMOVESTATE_UNKNOWN = 0x0,
  DRONEMOVESTATE_TO_POS = 0x1,
  DRONEMOVESTATE_TO_NODE = 0x2,
  NUM_DRONEMOVESTATES = 0x3,
};

/* 2676 */
struct HeliPathPos
{
  HelicopterMoveState moveState;
  float speed;
  float origin[3];
  float angles[3];
  float vel[3];
  float rotVel[3];
  float accel[3];
  HelicopterHover hover;
  int stopping;
  int yawSlowDown;
  float prevGoalYaw;
  gentity_s *ent;
  float goalPosition[3];
  int stopAtGoal;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float maxDragSpeed;
  float nearGoalNotifyDist;
  float dronePrevOrigin[3];
  DroneMoveState droneMoveState;
  float droneOffset[3];
  float droneMovePos[3];
  float droneNavPath[32][3];
  int numDroneNavPathNodes;
  int currentDroneNavPathNodeIndex;
  float droneMovePath[4][3];
  int numDroneMovePathNodes;
  bool droneCanFastMoveThroughPath;
  int currentDroneMovePathNodeIndex;
  int droneShortcutFrameDelay;
  float droneLastSafePosition[3];
  float turningAbility;
  float lookAtEntOrigin[3];
  bool hasLookAtEnt;
  int hasGoalYaw;
  int hasTargetYaw;
  float goalYaw;
  float targetYaw;
  float yawOverShoot;
  float maxAngleVel[3];
  float yawAccel;
  float yawDecel;
  float maxPitchAngle;
  float maxRollAngle;
  float vehDefAccel;
};

/* 2677 */
struct __declspec(align(4)) VehicleTurret
{
  int fireTime;
  int fireBarrel;
  float barrelOffset;
  int barrelBlocked;
  bool turretMoving;
};

/* 2678 */
struct VehicleJitter
{
  int jitterPeriodMin;
  int jitterPeriodMax;
  int jitterEndTime;
  float jitterOffsetRange[3];
  float jitterDeltaAccel[3];
  float jitterAccel[3];
  float jitterPos[3];
};

/* 2679 */
struct VehicleBoat
{
  float rockingDirYaw;
  float bounceCurrentForce;
  float bouncePeakForce;
};

/* 380 */
enum VehicleCameraState
{
  VEH_CAMERA_DEFAULT = 0x0,
  VEH_CAMERA_DELAYED = 0x1,
  VEH_CAMERA_CHANGED = 0x2,
};

/* 381 */
enum VehicleManualMode
{
  VEH_MANUAL_OFF = 0x0,
  VEH_MANUAL_ON = 0x1,
  VEH_MANUAL_TRANS = 0x2,
};

/* 382 */
enum VehicleRotateToMode
{
  VEH_ROTATE_TO_OFF = 0x0,
  VEH_ROTATE_TO_ACCEL = 0x1,
  VEH_ROTATE_TO_DECEL = 0x2,
};

/* 2680 */
struct VehicleTags
{
  int player;
  int detach;
  int popout;
  int body;
  int turret;
  int turret_base;
  int barrel;
  int flash[5];
  int wheel[6];
};

/* 383 */
enum VehiclePathType
{
  VEH_PATH_FOLLOW = 0x0,
  VEH_PATH_CONSTRAINED = 0x1,
};

/* 2681 */
struct Vehicle
{
  gentity_s *ent;
  VehicleDrivingState drivingState;
  VehicleTransmission transMode;
  VehiclePathPos pathPos;
  VehiclePathDir pathDir;
  VehicleTrackpos trackPos;
  vehicle_physic_t phys;
  PhysVehicle *physVeh;
  PhysVehicleControl physVehCtrl;
  int boostTime;
  int defIndex;
  int team;
  unsigned int useHintStringIndex;
  HeliPathPos heliPathPos;
  float speed;
  float pathSpeed;
  __int16 waitNode;
  float waitSpeed;
  VehicleTurret turret;
  VehicleJitter jitter;
  VehicleBoat boat;
  VehicleCameraState cameraState;
  scr_string_t lookAtText0;
  scr_string_t lookAtText1;
  VehicleManualMode manualMode;
  float manualSpeed;
  float manualAccel;
  float manualDecel;
  float manualTime;
  VehicleRotateToMode rotateToYawMode;
  float rotateToYaw;
  float rotateToYawAccel;
  int hasTarget;
  int targetEnt;
  EntHandle lookAtEnt;
  float targetOrigin[3];
  float targetOffset[3];
  float goalPosition[3];
  float joltDir[2];
  float joltTime;
  float joltWave;
  float joltSpeed;
  float joltDecel;
  float throttle;
  float brake;
  float impactSpeed;
  VehicleTags boneIndex;
  int turretHitNum;
  unsigned int trophyAmmo;
  int trophyReloadEndTime;
  VehiclePathType pathType;
  int canPushEntities;
  int useDroneLogic;
  EntHandle droneTarget;
  int isMultiStage;
  int isDeathStage;
};

/* 2695 */
struct __declspec(align(8)) tagInfo_s
{
  gentity_s *parent;
  gentity_s *next;
  scr_string_t name;
  bool blendToParent;
  int index;
  float axis[4][3];
  float parentInvAxis[4][3];
};

/* 2697 */
struct vis_cache_t
{
  int bVisible;
  int iLastUpdateTime;
  int iLastVisTime;
  int iFirstVisTime;
};

/* 2709 */
struct __declspec(align(8)) sentient_info_t
{
  vis_cache_t VisCache;
  int iLastAttackMeTime;
  int lastKnownPosTime;
  int attackTime;
  bool surprised;
  float vLastKnownLocalPos[3];
  pathnode_t *pLastKnownNode;
  char lastKnownReason;
  __int16 lastKnownGroundEntNum;
};

/* 2710 */
struct potential_threat_t
{
  bool isEnabled;
  float direction[2];
};

/* 2704 */
struct SentientHandle
{
  unsigned __int16 number;
  unsigned __int16 infoIndex;
};

/* 2711 */
struct AISecondaryTarget
{
  EntHandle entity;
  float dirToEnt[2];
  float distToEnt;
  pathnode_t *node;
};

/* 2712 */
struct AIThreat
{
  bool hasThreateningEnemy;
  bool allEnemiesInSimilarDir;
  bool newEnemyReaction;
  bool ignoreExplosionEvents;
  bool bPacifist;
  int iPacifistWait;
  potential_threat_t potentialThreat;
  int threatUpdateTime;
  float footstepDetectDistSq;
  float footstepDetectDistWalkSq;
  float footstepDetectDistSprintSq;
  float reactionTargetPos[3];
  float newEnemyReactionDistSq;
  float highlyAwareRadius;
  SentientHandle pFavoriteEnemy;
  int numSecondaryTarget;
  AISecondaryTarget secondaryTargets[2];
};

/* 2713 */
struct AISight
{
  float fovDot;
  float fovDotBusy;
  float fMaxSightDistSqrd;
  int latency;
  bool ignoreCloseFoliage;
  bool lastEnemySightPosValid;
  float lastEnemySightPos[3];
  float anglesToLikelyEnemyPath[3];
  int faceLikelyEnemyPathNeedCheckTime;
  int faceLikelyEnemyPathNeedRecalculateTime;
  const pathnode_t *faceLikelyEnemyPathNode;
  float upAimLimit;
  float downAimLimit;
  float rightAimLimit;
  float leftAimLimit;
};

/* 2714 */
struct AICachedInfo
{
  int time;
  float pos[3];
  float dir[3];
};

/* 2715 */
struct AIOrientation
{
  float vDesiredAngles[3];
  float fLookPitch;
  float fLookYaw;
  float maxFaceEnemyDistSq;
  char relativeDir;
  char prevRelativeDir;
  bool faceMotion;
  bool gunBlockedByWall;
  bool lockScriptOrient;
  float vLookForward[3];
  float vLookRight[3];
  float vLookUp[3];
};

/* 2716 */
struct AINavigation
{
  float fWalkDist;
  float fWalkDistFacingMotion;
  bool isInBadPlace;
  char badplaceRecheckPathLen;
  float badPlaceAwareness;
};

/* 2717 */
struct __declspec(align(8)) AITurret
{
  gentity_s *pTurret;
  unsigned __int16 turretAnim;
  char turretAnimSet;
};

/* 2718 */
struct pathpoint_t
{
  float vOrigPoint[3];
  float fDir2D[2];
  float fOrigLength;
  int iNodeNum;
};

/* 2719 */
struct path_s
{
  pathpoint_t pts[32];
  char wPathLen;
  char wOrigPathLen;
  char wDodgeCount;
  char wNegotiationStartNode;
  char lookaheadNextNode;
  char pathChangeNotifyNode;
  __int16 wDodgeEntity;
  float vFinalGoal[3];
  float vStartPos[3];
  float lookaheadDir[3];
  float lookaheadPos[3];
  float fLookaheadDist;
  float fLookaheadAmount;
  float fLookaheadDistToNextNode;
  int minLookAheadNodes;
  int flags;
  int iPathTime;
  int iPathClearedTime;
  team_t eTeam;
  float fCurrLength;
  float vCurrPoint[3];
  int iPathEndTime;
  float pathEndAnimDistSq;
  bool pathEndAnimNotified;
  bool lookaheadHitsStairs;
  bool useChokePoints;
  float pathChangeTracePos[2];
  int randomPercent;
  unsigned int parentIndex;
  float badPlaceAwareness;
  int ownerEntNum;
  int iTraceMask;
};

/* 2720 */
struct __declspec(align(8)) ai_common_t
{
  gentity_s *ent;
  sentient_s *sentient;
  sentient_info_t sentientInfo[66];
  AIThreat threat;
  AISight sight;
  AICachedInfo eyeInfo;
  AIOrientation orientation;
  AINavigation navigation;
  AITurret turret;
  path_s Path;
  int traceCount;
};

/* 2698 */
struct pathnode_yaworient_t
{
  float fLocalAngle;
  float localForward[2];
};

/* 2701 */
union $6D4B5EEAF83535256B1A445646062996
{
  pathnode_yaworient_t yaw_orient;
  float angles[3];
};

/* 2699 */
union PathNodeParentUnion
{
  scr_string_t name;
  unsigned __int16 index;
};

/* 1028 */
enum PathNodeErrorCode
{
  PNERR_NONE = 0x0,
  PNERR_INSOLID = 0x1,
  PNERR_FLOATING = 0x2,
  PNERR_NOLINK = 0x3,
  PNERR_DUPLICATE = 0x4,
  PNERR_NOSTANCE = 0x5,
  PNERR_INVALIDDOOR = 0x6,
  PNERR_NOANGLES = 0x7,
  PNERR_BADPLACEMENT = 0x8,
  NUM_PATH_NODE_ERRORS = 0x9,
};

/* 2702 */
union $AF78DDC984421B5F514638F336F17E31
{
  float minUseDistSq;
  PathNodeErrorCode error;
};

/* 2703 */
struct pathnode_constant_t
{
  unsigned __int16 type;
  unsigned int spawnflags;
  scr_string_t targetname;
  scr_string_t script_linkName;
  scr_string_t script_noteworthy;
  scr_string_t target;
  scr_string_t animscript;
  int animscriptfunc;
  float vLocalOrigin[3];
  $6D4B5EEAF83535256B1A445646062996 ___u9;
  PathNodeParentUnion parent;
  $AF78DDC984421B5F514638F336F17E31 ___u11;
  __int16 wOverlapNode[2];
  unsigned __int16 totalLinkCount;
  pathlink_s *Links;
};

/* 2705 */
struct pathnode_dynamic_t
{
  SentientHandle pOwner;
  int iFreeTime;
  int iValidTime[3];
  __int16 wLinkCount;
  __int16 wOverlapCount;
  __int16 turretEntNumber;
  char userCount;
  char hasBadPlaceLink;
  int spreadUsedTime[2];
  __int16 flags;
  __int16 dangerousCount;
  int recentUseProxTime;
};

/* 2707 */
union $73F238679C0419BE2C31C6559E8604FC
{
  float nodeCost;
  int linkIndex;
};

/* 2708 */
struct __declspec(align(8)) pathnode_transient_t
{
  int iSearchFrame;
  pathnode_t *pNextOpen;
  pathnode_t *pPrevOpen;
  pathnode_t *pParent;
  float fCost;
  float fHeuristic;
  $73F238679C0419BE2C31C6559E8604FC ___u6;
};

/* 2706 */
struct pathnode_t
{
  pathnode_constant_t constant;
  pathnode_dynamic_t dynamic;
  pathnode_transient_t transient;
};

/* 2647 */
const struct __declspec(align(8)) VehicleTrackSegment
{
  const char *targetName;
  VehicleTrackSector *sectors;
  unsigned int sectorCount;
  VehicleTrackSegment **nextBranches;
  unsigned int nextBranchesCount;
  VehicleTrackSegment **prevBranches;
  unsigned int prevBranchesCount;
  float endEdgeDir[2];
  float endEdgeDist;
  float totalLength;
};

/* 2650 */
struct __declspec(align(4)) PhysVehicleWheel
{
  float originLocal[3];
  unsigned int flags;
  float forward[3];
  float speedRatio;
  float accelRatio;
  float sideFriction;
  bool slipping;
};

/* 2651 */
struct dBase
{
};

/* 2652 */
struct dObject : dBase
{
  dObject *next;
  dObject **tome;
  void *userdata;
  int tag;
  dxWorld *world;
};

/* 1042 */
enum JointType
{
  RAGDOLL_JOINT_NONE = 0x0,
  RAGDOLL_JOINT_HINGE = 0x1,
  RAGDOLL_JOINT_SWIVEL = 0x2,
};

/* 2655 */
struct dxJointNode
{
  dxJoint *joint;
  dxBody *body;
  int bodyTag;
  dxJointNode *next;
};

/* 2653 */
struct  dxJoint : dObject
{
  JointType type;
  int flags;
  dxJointNode node[2];
};

/* 2669 */
struct  JointOrientation : dxJoint
{
  unsigned int constraintRowCount;
  float rollResistance;
  float pitchResistance;
  float yawResistance;
  float uprightStrengthRoll;
  float uprightStrengthPitch;
  bool uprightCorrection;
  float targetPitch;
  float maxRoll;
  float maxPitch;
};

/* 2670 */
struct  __declspec(align(4)) JointPath : dxJoint
{
  int substeps;
  float pos[2];
  float vel[2];
  float yaw;
  float yawVel;
  float cfm;
  float erp;
  bool enabled;
};

/* 2673 */
struct __declspec(align(8)) PhysVehicle
{
  __int64 body;
  PhysVehicleWheel wheels[6];
  JointOrientation orientationConstraint;
  JointPath pathConstraint;
  unsigned int wheelsOnGroundCount;
  float invWheelsWithPower;
  float desiredAccel;
  float desiredSpeed;
  float brakingFactor;
  float steeringAngle;
  float pitchControl;
  float velocity[3];
  float acceleration[3];
  float prevAcceleration[3];
  float localVelocity[3];
  float localAcceleration[3];
  float jolt[3];
  float frontWheelCenter[3];
  float rearWheelCenter[3];
  float steeringPoint[3];
  float steeringPointDist;
  float steeringHalfWidth;
  unsigned int flags;
  const VehiclePhysDef *def;
  const GraphFloat *accelGraph;
  float topSpeed;
  int passEntityNum;
  int modelIndex;
  float tankMaxYawSpeed;
  float tankYawAccel;
  float conveyorVelocity[2];
};

/* 2700 */
struct pathlink_s
{
  float fDist;
  unsigned __int16 nodeNum;
  char disconnectCount;
  char negotiationLink;
  char flags;
  char ubBadPlaceCount[3];
};

/* 2646 */
struct __declspec(align(8)) VehicleTrackSector
{
  float startEdgeDir[2];
  float startEdgeDist;
  float leftEdgeDir[2];
  float leftEdgeDist;
  float rightEdgeDir[2];
  float rightEdgeDist;
  float sectorLength;
  float sectorWidth;
  float totalPriorLength;
  float totalFollowingLength;
  VehicleTrackObstacle *obstacles;
  unsigned int obstacleCount;
};

/* 2662 */
struct dxQuickStepParameters
{
  int num_iterations;
  float w;
};

/* 2663 */
struct dxContactParameters
{
  float max_vel;
  float min_depth;
};

/* 2664 */
struct dxWorldStepInfo
{
  float gravity[4];
  float global_erp;
  float global_cfm;
  dxQuickStepParameters qs;
  dxContactParameters contactp;
};

/* 2660 */
struct dxAutoDisable
{
  float linearThresholdSqrd;
  float angularThresholdSqrd;
  float idle_time;
  int idle_steps;
};

/* 199 */
enum PhysWorld
{
  PHYS_WORLD_FIRST_CLIENT_WORLD = 0x0,
  PHYS_WORLD_DYNENT = 0x0,
  PHYS_WORLD_FX = 0x1,
  PHYS_WORLD_RAGDOLL = 0x2,
  PHYS_WORLD_LAST_CLIENT_WORLD = 0x2,
  PHYS_WORLD_FIRST_SERVER_WORLD = 0x3,
  PHYS_WORLD_VEHICLE = 0x3,
  PHYS_WORLD_WEAPON_AND_SCRIPT = 0x4,
  PHYS_WORLD_LAST_SERVER_WORLD = 0x4,
  PHYS_WORLD_COUNT = 0x5,
};

/* 2665 */
struct ConstraintRowData
{
  float J_body1Linear[3];
  float lambda;
  float J_body1Angular[3];
  int body1;
  float J_body2Linear[3];
  int body2;
  float J_body2Angular[3];
  float padding1;
  float iMJ_body1Linear[3];
  float padding2;
  float iMJ_body1Angular[3];
  float padding3;
  float iMJ_body2Linear[3];
  float padding4;
  float iMJ_body2Angular[3];
  unsigned int oneSided;
  float lo;
  float hi;
  float rhs;
  float Ad;
};

/* 2666 */
struct SorLcpData
{
  int order[576];
};

/* 2667 */
struct QuickstepData
{
  ConstraintRowData rowData[576];
  SorLcpData sd;
};

/* 2668 */
struct dxWorld : dBase
{
  dxBody *firstbody;
  dxJoint *firstjoint;
  int bodyCount;
  int jointCount;
  dxWorldStepInfo stepInfo;
  dxAutoDisable adis;
  int adis_flag;
  float seconds;
  int useWorkerCmd;
  PhysWorld worldIndex;
  float angularVelocityMax;
  __declspec(align(16)) QuickstepData qd;
};

/* 2659 */
struct dMass
{
  float mass;
  float c[4];
  float I[12];
};

/* 2661 */
struct dxBodyInfo
{
  float pos[4];
  float q[4];
  float R[12];
  float lvel[4];
  float avel[4];
  float maxLinVel;
  float maxAngVel;
  float padding[2];
};

/* 2654 */
struct  dxBody : dObject
{
  dxJointNode *firstjoint;
  int flags;
  dxGeom *geom;
  dMass mass;
  float invI[12];
  float invMass;
  float facc[4];
  float tacc[4];
  float finite_rot_axis[4];
  dxAutoDisable adis;
  float adis_timeleft;
  int adis_stepsleft;
  dxBodyInfo info;
};

/* 486 */
enum VehicleAxleType
{
  VEH_AXLE_FRONT = 0x0,
  VEH_AXLE_REAR = 0x1,
  VEH_AXLE_ALL = 0x2,
  VEH_AXLE_COUNT = 0x3,
};

/* 2671 */
const struct __declspec(align(8)) VehiclePhysDef
{
  int physicsEnabled;
  const char *physPresetName;
  const PhysPreset *physPreset;
  const char *accelGraphName;
  VehicleAxleType steeringAxle;
  VehicleAxleType powerAxle;
  VehicleAxleType brakingAxle;
  float topSpeed;
  float reverseSpeed;
  float maxVelocity;
  float maxPitch;
  float maxRoll;
  float suspensionTravelFront;
  float suspensionTravelRear;
  float suspensionStrengthFront;
  float suspensionDampingFront;
  float suspensionStrengthRear;
  float suspensionDampingRear;
  float frictionBraking;
  float frictionCoasting;
  float frictionTopSpeed;
  float frictionSide;
  float frictionSideRear;
  float velocityDependentSlip;
  float rollStability;
  float rollResistance;
  float pitchResistance;
  float yawResistance;
  float uprightStrengthPitch;
  float uprightStrengthRoll;
  float targetAirPitch;
  float airYawTorque;
  float airPitchTorque;
  float minimumMomentumForCollision;
  float collisionLaunchForceScale;
  float wreckedMassScale;
  float wreckedBodyFriction;
  float minimumJoltForNotify;
  float slipThresholdFront;
  float slipThresholdRear;
  float slipFricScaleFront;
  float slipFricScaleRear;
  float slipFricRateFront;
  float slipFricRateRear;
  float slipYawTorque;
};

/* 2672 */
const struct GraphFloat
{
  char name[64];
  float knots[32][2];
  unsigned __int16 knotCount;
  float scale;
};

/* 2645 */
struct VehicleTrackObstacle
{
  float origin[2];
  float radius;
};

/* 2656 */
struct dxGeom : dBase
{
  dxGeomVtbl *vfptr;
  int type;
  int gflags;
  void *data;
  dxBody *body;
  dxGeom *body_next;
  float *pos;
  float *R;
  dxGeom *next;
  dxGeom **tome;
  dxSpace *parent_space;
  float aabb[6];
  unsigned int category_bits;
  unsigned int collide_bits;
};

/* 355 */
enum PhysPresetScaling
{
  PHYSPRESET_SCALING_LINEAR = 0x0,
  PHYSPRESET_SCALING_QUADRATIC = 0x1,
  PHYSPRESET_SCALING_COUNT = 0x2,
};

/* 2454 */
struct __declspec(align(8)) PhysPreset
{
  const char *name;
  int type;
  float mass;
  float bounce;
  float friction;
  float bulletForceScale;
  float explosiveForceScale;
  const char *sndAliasPrefix;
  float piecesSpreadFraction;
  float piecesUpwardVelocity;
  float minMomentum;
  float maxMomentum;
  float minVolume;
  float maxVolume;
  float minPitch;
  float maxPitch;
  PhysPresetScaling volumeType;
  PhysPresetScaling pitchType;
  bool tempDefaultToCylinder;
  bool perSurfaceSndAlias;
};

/* 2657 */
struct dxGeomVtbl
{
  void *(__fastcall *__vecDelDtor)(dxGeom*, unsigned int);
  void (__fastcall *computeAABB)(dxGeom *);
  int (__fastcall *AABBTest)(dxGeom *, dxGeom *, float *);
};

/* 2658 */
struct __declspec(align(16)) dxSpace : dxGeom
{
  int count;
  dxGeom *first;
  int cleanup;
  int current_index;
  dxGeom *current_geom;
  int lock_count;
};

